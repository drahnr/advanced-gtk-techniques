<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="gettext-project">
<title>Allowing your program to be translated into other languages</title>

<p>There is one more piece of infrastructure to add before we start writing real code.
That is allowing the program to be translated into other languages.
You might think that translation is something to be done only after the application is finished, but it's much easier to keep translation in mind while you are writing the application.</p>

<p>Do you have to learn thirty languages to do this?
No.
The way it usually works in an open source project is that you write the program in English (or, strictly speaking, in the "C locale".)
Another tool, <cmd>gettext</cmd>, extracts all the words and phrases from the program that will be displayed to users, and puts them in a <em>translation template</em> or <file>.pot</file> file.</p>

<p>You then recruit translators to your project (this is the hard part) and they translate some or all of the phrases in the translation template, producing a <file>.po</file> file.
Generally, you give your translators commit access to your source code repository, so they just commit the <file>.po</file> files whenever they are done.
The <cmd>make install</cmd> process takes care of installing the translations in the proper places in the user's system.</p>

<p>When the program is started, it looks at the value of the <code>LANG</code> environment variable.
If this contains a language code for a language which the program is available in, then the program will display the translated phrases for that language.
If not, the program will simply be in English.
Also, if the translator did not finish translating the entire translation template, then the program will be in the other language as much as possible, and any untranslated phrases will still be in English.
This allows translation to be an ongoing process, and translators can contribute as much as they have time for.
Also, if you add a new message in a new version of the program, and the translator is on vacation, it won't mean the whole translation is invalidated.</p>

<section>
<title>Using <cmd>gettext</cmd></title>

<p>First, copy the project that we have so far to a new <file>app-skeleton4</file> directory, and change the version number if you like.
To add <cmd>gettext</cmd> to our build system, add the following lines to the "Shopping List" section of <file>configure.ac</file>:</p>

<!--{{{app-skeleton4/configure.ac:14-15%autoconf}}}-->

<p>Also, add <code>po/Makefile.in</code> to the <code>AC_CONFIG_FILES</code> call in the "Output" section, and <code>po</code> to the <code>SUBDIRS</code> variable in <file>Makefile.am</file>.
(The <file>po</file> subdirectory is where the <cmd>gettext</cmd> files are placed by default.)</p>

<note>
  <p>It is slightly confusing that we should put a file named <code>Makefile.in</code> into <code>AC_CONFIG_FILES</code>.
  Didn't <cmd>configure</cmd> transform <file>Makefile.in</file> into <file>Makefile</file>?
  In this case, <cmd>gettext</cmd> installs a <file>Makefile.in.in</file> which we transform into <file>Makefile.in</file>.
  Then, code generated by the <code>AM_GNU_GETTEXT</code> macro transforms the <file>Makefile.in</file> into <file>Makefile</file> automatically.
  One hopes that things won't get any more convoluted in the future, with tools that install a <file>Makefile.in.in.in.in</file>.</p>
</note>

<p>To install the <cmd>gettext</cmd> files, simply run the bootstrapping command: <cmd>autoreconf -i</cmd>.
Then, before running <cmd>configure</cmd>, there are a few files we have to add to the <file>po</file> directory.
The first is called <file>POTFILES.in</file>.
This is a list of files that contain translatable messages for <cmd>gettext</cmd> to extract.
The next file is called <file>LINGUAS</file>.
This file contains a space-separated list of all available translations.
Create both files and leave them empty for now, we will fill them later.</p>

<p>The last file to create is called <file>Makevars</file>.
This file contains some customizable variables that get inserted into the <file>po</file> directory's <file>Makefile</file>.
After running <cmd>autoreconf</cmd>, there should be a template for this file called <file>Makevars.template</file>.
Copy this to <file>Makevars</file> and edit it.
It doesn't need much changing; I changed the <code>COPYRIGHT_HOLDER</code> variable to my name, and the <code>MSGID_BUGS_ADDRESS</code> to <code>$(PACKAGE_BUGREPORT)</code>, so that translators report bugs in the messages to the same place that regular bugs should be reported.
(In a large project, you might want to separate these.)</p>

<note>
  <p>Autoconf sets the <code>PACKAGE_BUGREPORT</code> variable to the bug report address that we specified in the call to <code>AC_INIT</code> in <file>configure.ac</file>.</p>
</note>

<p>Next, we must mark all the user interface strings in <file>hello-world.c</file> for translation.
First, add at the top of the file:</p>

<!--{{{app-skeleton4/src/hello-world.c:1}}}-->

<p>This is a special GLib header file where the interface to <cmd>gettext</cmd> is defined.
(<code>i18n</code> stands for "internationalization", because there are eighteen letters between the initial I and the final N.)
In particular, this header defines the <code>_()</code> macro with which we mark our strings.
(If <cmd>gettext</cmd> support is disabled, <code>_()</code> does nothing; otherwise it is an alias for the <code>gettext()</code> function.
It is called <code>_</code> so as to save typing and not to distract the eye while reading the code.)</p>

<p>Then, add the following code to the top of the <code>main()</code> function, at line 40:</p>

<!--{{{app-skeleton4/src/hello-world.c:40-43}}}-->

<p>This sets up the program to read the translated message files. Finally, add the following line to the makefile so that the program knows where to find the message files:</p>

<!--{{{app-skeleton4/src/Makefile.am:2%automake}}}-->

<p>There are four strings that we need to mark for translation:
one in <code>print_hello()</code>,
one in <code>on_delete_event()</code>,
the argument of <code>gtk_window_set_title()</code> in <code>main()</code>,
and the argument of <code>gtk_button_new_with_label()</code> in <code>main()</code>.
Surround these strings with a call to <code>_()</code>, so that <code>"Hello World"</code> becomes <code>_("Hello World")</code>.</p>

<note>
  <p>Note that not <em>all</em> the strings should be translated!
  For example, the names of the signals in <code>g_signal_connect()</code> and the icon name in <code>gtk_window_set_icon_name()</code> should be left as they are.
  They are not displayed to the user; instead, they have an internal meaning to the program.
  If we were to translate the <code>destroy</code> signal into German, then the program would stop working, since it would try to connect to the <code>zerst√∂ren</code> signal, which of course it has never heard of.</p>
</note>

<p>Last of all, we need to add our source file with the strings marked for translation to <file>POTFILES.in</file>, so <cmd>gettext</cmd> knows to look there:</p>

<!--{{{app-skeleton4/po/POTFILES.in:1%plain}}}-->

<p>If we now change to the <file>po</file> directory and run <cmd>make update-po</cmd>, an <file>app-skeleton.pot</file> should be generated.
This is the template that translators can base their translations on.</p>

</section>
<section>
<title>Translating the program</title>


</section>

</page>
